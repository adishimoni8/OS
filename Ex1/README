adishimoni8, guy.mizrahi1
Adi Shimoni (316342435), Guy Mizrahi (314791351)
EX: 1

FILES:
osm.cpp -- a library that provides functions to measure the average time it
           takes to perform different operations.
Makefile -- a makefile for assignment 2.
graph.png -- a graph that illustrates the outcome of assignment 2.

REMARKS:
None

ANSWERS:

Q1:
WhatIDo is a given program which expects a single argument and for it to be
a file descriptor.

In case there is no supplied argument to the program,
upon running the program, it checks whether the desired argument
is given or not.
It attempts to duplicate the non given input as a file descriptor and checks
it's existence and validity.
Once it figures that there is no given argument, it prints an error message to
stderr, afterwards it prints "Success", closes the duplicated file descriptor
and exits with exit code SUCCESS(0).

In case there is a supplied argument, the program creates a directory
named "Welcome" and inside of it, creates another directory named "To".
Both directories are defined to own the same permissions:
For user and group: read, write and execute permissions.
For other: only read and execute.
It then creates a new file named "OS2021" inside "To" directory with read and
write permissions.
Afterwards, it writes into "OS2021" the following:
"(user name), If you haven't read the course guidelines yet ---
do it right now!".
Eventually, it closes the file, deletes it, deletes "To" directory and lastly,
deletes the 'Welcome' directory and exits the program with exit code SUCCESS(0).

Q2:
osm.cpp is our implementation of given header file.
it performs 3 different tasks and measures the time taken for them to be done.
A couple techniques were used during the measurement:
1) Loop unrolling: a technique to minimize un-necessary actions by performing
   same task in "chunks" and complementary reducing the iterations.
2) re-measuring and rounding up amount of iterations, since we're performing
   Loop unrolling, it is required to round up the amount of iterations so it
   will divide by our unrolling factor. The calculation is performed in
   get_num_of_iterations() function found in osm.cpp.
The code was implemented in 3 different environments to study the effects of
the working environment on the tasks.
1) "Local" - Linux OS environment.
2) "Container" - usage of Singularity and Docker for running the container.
3) "VM" - a virtual machine ran by kvm and qemu using tiny-core-linux. it grants
   user permissions for all operations, instead of keeping the kernel actions
   hidden from user.
the findings were interesting: the VM took more time than the other 2 options
to perform all tasks, it shows about the importance of the OS ability to
manage tasks optimally.